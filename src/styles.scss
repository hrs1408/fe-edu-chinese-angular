/* You can add global styles to this file, and also import other style files */

/* Add Font Awesome */
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css");

/* Breakpoints */
$breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (max-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }
}

/* Color System */
:root {
  // Primary Colors
  --primary-dark: #003366; // Dark blue for header/footer background
  --primary-main: #0066cc; // Main blue for links and buttons
  --primary-light: #e6f0ff; // Light blue for backgrounds

  // Secondary Colors
  --secondary-main: #ff9900; // Orange for CTAs and highlights
  --secondary-light: #fff4e6; // Light orange for hover states

  // Neutral Colors
  --neutral-900: #1a1a1a; // Text color
  --neutral-700: #4d4d4d; // Secondary text
  --neutral-500: #808080; // Disabled text
  --neutral-300: #cccccc; // Borders
  --neutral-100: #f5f5f5; // Background
  --white: #ffffff;
}

/* Typography */
body {
  margin: 0;
  font-family: "Montserrat", serif;
  color: var(--neutral-900);
  line-height: 1.6;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  color: var(--primary-dark);
  margin: 0 0 1rem;
}

a {
  color: var(--primary-main);
  text-decoration: none;
  transition: color 0.3s ease;

  &:hover {
    color: var(--secondary-main);
  }
}

/* Global Styles */
.container {
  width: 100%;
  margin: 0 auto;
  padding: 0 1rem;

  @media (min-width: map-get($breakpoints, sm)) {
    max-width: 540px;
  }
  @media (min-width: map-get($breakpoints, md)) {
    max-width: 720px;
  }
  @media (min-width: map-get($breakpoints, lg)) {
    max-width: 960px;
  }
  @media (min-width: map-get($breakpoints, xl)) {
    max-width: 1140px;
  }
  @media (min-width: map-get($breakpoints, xxl)) {
    max-width: 1320px;
  }
}

.btn {
  display: inline-block;
  padding: 0.75rem 1.5rem;
  border-radius: 4px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;

  &-primary {
    background-color: var(--primary-main);
    color: var(--white);
    border: none;

    &:hover {
      background-color: var(--primary-dark);
    }
  }

  &-secondary {
    background-color: var(--secondary-main);
    color: var(--white);
    border: none;

    &:hover {
      background-color: darken(#ff9900, 10%);
    }
  }

  &-outline {
    background-color: transparent;
    border: 2px solid var(--primary-main);
    color: var(--primary-main);

    &:hover {
      background-color: var(--primary-main);
      color: var(--white);
    }
  }
}

/* Utility Classes */
.text-primary {
  color: var(--primary-main);
}
.text-secondary {
  color: var(--secondary-main);
}
.bg-primary {
  background-color: var(--primary-dark);
}
.bg-light {
  background-color: var(--neutral-100);
}
.text-center {
  text-align: center;
}

/* Animation Utilities */
.hover-lift {
  transition: transform 0.3s ease;
  &:hover {
    transform: translateY(-4px);
  }
}

.fade-in {
  animation: fadeIn 0.5s ease-in forwards;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

html {
  scroll-behavior: smooth !important;
  font-size: 16px;

  @include respond-to(lg) {
    font-size: 15px;
  }

  @include respond-to(md) {
    font-size: 14px;
  }
}

.section-header {
  text-align: center;
  margin-bottom: 40px;

  .main-title {
    display: inline-flex;
    flex-direction: column;
    align-items: center;
    margin: 0;

    .category {
      color: #003366;
      font-size: 14px;
      margin-bottom: 4px;

      @include respond-to(md) {
        font-size: 12px;
      }
    }

    .title {
      font-size: 2rem;
      text-transform: uppercase;
      color: #003366;
      margin-bottom: 10px;

      @include respond-to(md) {
        font-size: 1.5rem;
      }
    }

    .underline {
      width: 60px;
      height: 2px;
      background: linear-gradient(to right, #005baa 50%, #e60012 50%);
    }
  }
}

/* Grid System */
.row {
  display: flex;
  flex-wrap: wrap;
  margin: -0.5rem;
}

.col {
  flex: 1 0 0%;
  padding: 0.5rem;
}

@for $i from 1 through 12 {
  .col-#{$i} {
    flex: 0 0 auto;
    width: percentage($i / 12);
  }

  @each $breakpoint, $value in $breakpoints {
    .col-#{$breakpoint}-#{$i} {
      @media (min-width: $value) {
        flex: 0 0 auto;
        width: percentage($i / 12);
      }
    }
  }
}

/* Spacing Utilities */
$spacer: 1rem;
$spacers: (
  0: 0,
  1: $spacer * 0.25,
  2: $spacer * 0.5,
  3: $spacer,
  4: $spacer * 1.5,
  5: $spacer * 3,
);

@each $breakpoint, $value in $breakpoints {
  @media (min-width: $value) {
    @each $prop in (margin, padding) {
      @each $size, $length in $spacers {
        .#{str-slice($prop, 1, 1)}-#{$breakpoint}-#{$size} { #{$prop}: $length !important; }
        .#{str-slice($prop, 1, 1)}t-#{$breakpoint}-#{$size} { #{$prop}-top: $length !important; }
        .#{str-slice($prop, 1, 1)}r-#{$breakpoint}-#{$size} { #{$prop}-right: $length !important; }
        .#{str-slice($prop, 1, 1)}b-#{$breakpoint}-#{$size} { #{$prop}-bottom: $length !important; }
        .#{str-slice($prop, 1, 1)}l-#{$breakpoint}-#{$size} { #{$prop}-left: $length !important; }
        .#{str-slice($prop, 1, 1)}x-#{$breakpoint}-#{$size} {
          #{$prop}-right: $length !important;
          #{$prop}-left: $length !important;
        }
        .#{str-slice($prop, 1, 1)}y-#{$breakpoint}-#{$size} {
          #{$prop}-top: $length !important;
          #{$prop}-bottom: $length !important;
        }
      }
    }
  }
}

/* Responsive Utilities */
.hide {
  display: none !important;
}

@each $breakpoint, $value in $breakpoints {
  .hide-#{$breakpoint} {
    @media (max-width: $value) {
      display: none !important;
    }
  }
  .show-#{$breakpoint} {
    @media (min-width: $value) {
      display: block !important;
    }
  }
}

.flex-column-reverse-mobile {
  @include respond-to(md) {
    flex-direction: column-reverse !important;
  }
}

/* Responsive Typography */
html {
  font-size: 16px;

  @include respond-to(lg) {
    font-size: 15px;
  }

  @include respond-to(md) {
    font-size: 14px;
  }
}

.section-header {
  text-align: center;
  margin-bottom: 40px;

  .main-title {
    display: inline-flex;
    flex-direction: column;
    align-items: center;
    margin: 0;

    .category {
      color: #003366;
      font-size: 14px;
      margin-bottom: 4px;

      @include respond-to(md) {
        font-size: 12px;
      }
    }

    .title {
      font-size: 2rem;
      text-transform: uppercase;
      color: #003366;
      margin-bottom: 10px;

      @include respond-to(md) {
        font-size: 1.5rem;
      }
    }

    .underline {
      width: 60px;
      height: 2px;
      background: linear-gradient(to right, #005baa 50%, #e60012 50%);
    }
  }
}

/* Grid System */
.row {
  display: flex;
  flex-wrap: wrap;
  margin: -0.5rem;
}

.col {
  flex: 1 0 0%;
  padding: 0.5rem;
}

@for $i from 1 through 12 {
  .col-#{$i} {
    flex: 0 0 auto;
    width: percentage($i / 12);
  }

  @each $breakpoint, $value in $breakpoints {
    .col-#{$breakpoint}-#{$i} {
      @media (min-width: $value) {
        flex: 0 0 auto;
        width: percentage($i / 12);
      }
    }
  }
}

/* Spacing Utilities */
$spacer: 1rem;
$spacers: (
  0: 0,
  1: $spacer * 0.25,
  2: $spacer * 0.5,
  3: $spacer,
  4: $spacer * 1.5,
  5: $spacer * 3,
);

@each $breakpoint, $value in $breakpoints {
  @media (min-width: $value) {
    @each $prop in (margin, padding) {
      @each $size, $length in $spacers {
        .#{str-slice($prop, 1, 1)}-#{$breakpoint}-#{$size} { #{$prop}: $length !important; }
        .#{str-slice($prop, 1, 1)}t-#{$breakpoint}-#{$size} { #{$prop}-top: $length !important; }
        .#{str-slice($prop, 1, 1)}r-#{$breakpoint}-#{$size} { #{$prop}-right: $length !important; }
        .#{str-slice($prop, 1, 1)}b-#{$breakpoint}-#{$size} { #{$prop}-bottom: $length !important; }
        .#{str-slice($prop, 1, 1)}l-#{$breakpoint}-#{$size} { #{$prop}-left: $length !important; }
        .#{str-slice($prop, 1, 1)}x-#{$breakpoint}-#{$size} {
          #{$prop}-right: $length !important;
          #{$prop}-left: $length !important;
        }
        .#{str-slice($prop, 1, 1)}y-#{$breakpoint}-#{$size} {
          #{$prop}-top: $length !important;
          #{$prop}-bottom: $length !important;
        }
      }
    }
  }
}
